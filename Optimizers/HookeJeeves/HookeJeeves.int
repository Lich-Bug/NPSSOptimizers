//------------------------------------------------------------------------------
// Classes to impliment HookeJeeves is implemented using Stanford's Steps
//-----------------------------------------------------------------------------

//----------------------------------------------------------------------------
// Limit obect to impose a constraint
//----------------------------------------------------------------------------
class Limit extends VariableContainer {
	
	description = "Limit obect to provide design constratints bu comparing two 
	equations.";
	
	string bigger{
		description = "Equation that must be the bigger of the two";
	}
	
	string smaller{
		description = "Equation that must be the smaller of the two";	
	}
}

//------------------------------------------------------------------------------
// Design variable object to allowed for variable to be changed
//------------------------------------------------------------------------------
class DesignVariable extends VariableContainer {
	description = "Design variable obect";
	
	string varName{
		description =  "Name of varaible to be changed";	
	}
	
	real perturbation{
		value = .01;
		description = "Amount to change the variable";	
	}
	
	Option perturbationType { 
		allowedValues = { "FRACTIONAL", "ABSOLUTE" }; 
		trigger = FALSE; 
	};
}

//----------------------------------------------------------------------------
// HookeJeeve calculations
//---------------------------------------------------------------------------
class HookeJeeves extends Element {
	
	string assembly{
		value = ".";
		description = "Assembly that is to be run bu thge optimier.  Default is
		the top level assembly.";
	}
	
	int consBool{
		value = 0.;
		description = ""; //What the hell is this?
	}
	
	string indList[];
	indList{
		description = "List of independents optimizer is varying.";
	}
	
	string limList[];
	limList{
		description = "List of limts the optimizer is varying.";	
	}
	
	real step{
		value = 1.;
		description =  "Step size for the optmizer.  Gets tighter for each step.";	
	}
	
	//----------------------------------------------------------------------
	//  add indepedents and limits to the active list
	//----------------------------------------------------------------------
	void postcreate(string name){
		int i;
		
		if(name -> hasInterface("DesignVariable")){
			indList.append(name);
		}
		
		if(name -> hasInterface("Limit")){
			limList.append(name);
			consBool = 1;
		}
	}
	
	//-------------------------------------------------------------------------
	// Perturbs a value based on a perturbValue and a perturbTypeList
	//-------------------------------------------------------------------------
	real perturb(real val, real perturbVal, string type, real step_val){
		if ( type == "ABSOLUTE" ){
			return perturbVal*step;
		}
		else if ( type == "FRACTIONAL" ){
			return val*perturbVal*step;
		}
		else{
			return 0;
		}
	}
	
	//-------------------------------------------------------------------------
	//  First step is to obatin a valid solution that satisfies the contriants
	//--------------------------------------------------------------------------
	void find_constraints( string indList[], string limList[], real step ){
		int i = 0;
		
		real bestVal[];
		// set the start point for the best saved value
		real bestCon = inf; // Infinity
		for(i = 0; i < indList.entries(); i++){
			bestVal.append(-inf); // Negative infinity
		}
		
		assembly->run();
		
		//--------------------------------------------------------------------
		// if there are any constraint, need to make sure intial guess
		// satisfies them.  Keep looping until we have valid disign
		//--------------------------------------------------------------------
		while (constraint(limList) > 0){
			// loop through the independents
			for (i = 0; i < indList.entries(); i++){
				
				// run the model
				assembly->run();
				
				// does the model look better with respect to constraints
				// if so, update best value
				if (constraint(limList) < bestCon){
					bestCon = constraint(limList);
					bestVal[i] = (indList[i]->varName)->value;
				}
				
				// step the independent value
				(indList[i]->varName)->value += perturb (( indList[i]->varName)->value, indList[i]->perturbation, indList[i]->perturbationType, step );
				
				// rerun the model
				assembly->run();
				
				
				// does the model look better with respect to constraints
				// if so, update best value
				if (constraint(limList) < bestCon){
					bestCon = constraint(limList);
					bestVal[i] = (indList[i]->varName)->value;
				}
				
				
				// step in the other direction
				(indList[i]->varName)->value -= 2*perturb(( indList[i]->varName)->value, indList[i]->perturbation, indList[i]->perturbationType, step );
				
				
				// run the model
				assembly->run();
				
				// does the model look better with respect to constraints
				// if so, update best value
				if ( constraint(limList) < bestCon ){
					bestCon = constraint(limList);
					bestVal[i] = (indList[i]->varName)->value;
				}
				
				// load in the best value
				(indList[i] -> varName)->value = bestVal[i];
				assembly->run();
			}
		}
	}
	
	//--------------------------------------------------------------------------
	// check to see if constraints are broken
	//--------------------------------------------------------------------------
	real check_constraints( string limList[ ] ){
		
		// check constraints if they are active
		if(consBool == 1){
			return constraint(limList);
		}
		
		// there are no constratinst this is easy
		return 0;
	}	
	
	//--------------------------------------------------------------------------
	// Finds the vector to the best point in the neighborhood 
	// (determined by step) of a point with dimensions indList[]
	//--------------------------------------------------------------------------
	real[] bestNeighbor(string indList[], string limList[], real step){	
		
		real origPoint [];
		real bestPoint[];
		real bestVector[];
		real bestInDimension;
		real bestObj;
		
		int i,j;
		origPoint = {};
		bestPoint = {};
		bestVector = {};
		
		assembly->run();
		bestObj = objective();
		
		// Find best neighboring point in length of indList dimensions while obeying constraints
		for( i=0; i < indList.entries(); i++ ){	
			origPoint.append((indList[i]->varName)->value);
			bestObj = objective();
			bestInDimension = (indList[i] ->varName)->value;
			(indList[i]->varName)->value += step;
			
			assembly->run();
			
			if(objective() > bestObj && check_constraints(limList) == 0){
				bestObj = objective();
				bestInDimension = (indList[i]->varName)->value;
			}
			
			
			(indList[i] -> varName)->value -= 2 * perturb(( indList[i]->varName)->value, indList[i]->perturbation, indList[i]->perturbationType, step );
			
			assembly->run();
			
			if(objective() > bestObj && check_constraints(limList) == 0){
				bestObj = objective();
				bestInDimension = (indList[i]->varName)->value;
			}
			
			(indList[i]->varName)->value = bestInDimension; // Sets point
			bestPoint.append( bestInDimension );
			
			assembly->run();
		}
		
		// Find the vector to the best point from the original point
		for( i = 0; i < bestPoint.entries(); i++ ){
			bestVector.append(bestPoint[i] - origPoint[i]);
		}
		
		return bestVector;
	}
	
	//--------------------------------------------------------------------------
	// Returns new point from old point in direction vector
	//--------------------------------------------------------------------------
	real[] searchInDirection(string indList[], real vector[]){
		int i;
		real newPoint[] = {};
		
		// determine the new point
		for ( i = 0; i < indList.entries(); i++ ){
			newPoint.append(( indList[i] -> varName) -> value + vector[i] );
		}
		return newPoint;
	}
	
	//--------------------------------------------------------------------------
	// Returns the magnitude of a vector (represented by real[])
	//--------------------------------------------------------------------------
	real magnitude ( real vector[] ){
		
		real sum = 0;
		int i;
		
		for ( i = 0; i < vector.entries(); i++ ){
			sum += vector[i] ** 2;
		}
		
		return sum**(0.5);
	}
	
	//--------------------------------------------------------------------------
	// calculate function
	//--------------------------------------------------------------------------
	void calculate(){
		
		real bestVector[];  // best direction to move in
		real newPoint[];    // next point to try
		real lastObj = -inf; // Negative Infinity
		real bestVals[];
		int i;
		
		// Step 0: Find values that fit the constraints for the problem before optimizing
		find_constraints( indList, limList, step );
		
		// (Step 5): Repeat Steps 1-4 until interval is small enough
		while ( step > 0.000001 ){	
			
			// (Step 3): Repeat Steps 1-2 until Step 1 returns a 0 vector
			while ( magnitude(bestNeighbor(indList, limList, step )) != 0 ){
				
				// Step 1: Find the vector to the best point in the neighborhood
				bestVector = bestNeighbor( indList, limList, step );
				
				// run the model)
				assembly->run();
				
				lastObj = -inf;
				bestVals = {};
				
				// load the new point into the variable values
				for ( i = 0; i < indList.entries(); i++ ){
					bestVals.append( (indList[i] -> varName)->value );
				}
				
				
				// Step 2: Search in the direction of the best vector until 
				// improvement is not seen
				while ( objective() > lastObj && check_constraints(limList) == 0 ){
					
					// determine the next point
					newPoint = searchInDirection( indList, bestVector );
					
					// load the new point into the variable values
					for ( i = 0; i < indList.entries(); i++ ){
						(indList[i] -> varName)->value = newPoint[i];
					}
					
					// save previous value
					lastObj = objective();
					
					// run the model
					assembly->run();
				}
				// load the new point into the variable values
				for ( i = 0; i < indList.entries(); i++ ){
					(indList[i] -> varName)->value=bestVals[i];
				}
			}
			// Step 4: Reduce the interval
			step = step * 0.1;
		}
	}
	
	//--------------------------------------------------------------------------
	// loop through the constraint list to see how bad the design is
	//--------------------------------------------------------------------------
	real constraint( string limList[] ){
		real bad_val = 0;
		int i;
		
		for ( i = 0; i < limList.entries(); i++ ){
			
			// evaluate both sides of the expression
			real rhs = evalExpr(limList[i] -> bigger);
			real lhs = evalExpr(limList[i] -> smaller);
			
			// if smaller > bigger then the constraint is violated
			if ( lhs > rhs ){
				// increase the overall badness by a specific amount
				bad_val = bad_val + (lhs - rhs) / abs(rhs); // rhs can not evaluate to zero
			}
		}
		return bad_val;
	}
	
	//----------------------------------------------------------------------
	//  add indepedents and limits to the active list
	//----------------------------------------------------------------------
	void postcreate(string name){
		int i;
		
		if( name->hasInterface("DesignVariable") ){
			indList.append(name);
		}
		
		if( name->hasInterface("Limit") ){
			limList.append(name);
			consBool = 1;
		}
	}
}
