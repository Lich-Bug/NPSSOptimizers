#include "aircraft.int"

// HookeJeeves is implemented using Stanford's Steps

class Limit extends VariableContainer {
	string bigger;

	string smaller;
	
	Option active
	{
		allowedValues = { "TRUE", "FALSE" }
        trigger = FALSE;
	}
}

class DesignVariable extends VariableContainer {
	string varName;
	
	real perturbation;
	
	Option perturbationType { allowedValues = {"FRACTIONAL", "ABSOLUTE"}; trigger = FALSE; };
	
	Option active
	{
		allowedValues = { "TRUE", "FALSE" }
        trigger = FALSE;
	}
}

class HookeJeeves extends Element {
	string assembly = ".";
	
	int consBool = 0;

	string indList[];
	
	string limList[];

	real step;
	real perturbScale;
	
	Aircraft aircraft;
	
	void postcreate(string name)
	{
		if(name -> hasInterface("DesignVariable"))
		{
			indList.append(name);
		}
		
		if(name -> hasInterface("Limit"))
		{
			limList.append(name);
			consBool = 1;
		}
	}
	
	int verify()
	{
		int i;
		
		// Re-Initialize variable lists
		indList = {}
		limList = {}
		
		// Load the variable lists
		string designVariables[] = list("DesignVariable");
		string limits[] = list("Limit");
		
		// Determine Active variables
		for(i = 0; i< designVariables.entries(); i++){
			if(designVariables[i] -> active == "TRUE"){
				indList.append(designVariables[i]);
			}
		}
		
		// Determine active Limits
		for(i = 0; i < limits.entries(); i++){
			if(limits[i]->active == "TRUE"){
				limList.append(limits[i]);
			}
		}
		
		return TRUE;
	}
	
	// Perturbs a value based on a perturbValue and a perturbTypeList
	real perturb(real val, real perturbVal, string type, real step_val)
	{
		if(type == "ABSOLUTE")
		{
			return perturbVal * step;
		}
		else if(type == "FRACTIONAL")
		{
			return val * perturbVal * step;
		}
		else
		{
			return 0;
		}
	}
	
	// Modifies the argument indList[] to fit the constraints of the problem;
	void find_constraints(string indList[], string limList[], real step)
	{
		int i = 0;
		
		real bestCon = 100000000; // Infinity
		real bestVal[];
		
		for(i = 0; i < indList.entries(); i++)
		{
			bestVal.append(-666666666); // Negative infinity
		}
		
		assembly -> run();
		
		while(check_constraints(limList) > 0)
		{
			for(i = 0; i < indList.entries(); i++)
			{
				assembly -> run();
			
				if(check_constraints(limList) < bestCon)
				{
					bestCon = constraint(limList);
					bestVal[i] = (indList[i] -> varName) -> value;
				}

				(indList[i] -> varName) -> value += perturb((indList[i] -> varName) -> value, indList[i] -> perturbation, indList[i] -> perturbationType, step);

				
				assembly -> run();
				

				if(check_constraints(limList) < bestCon)
				{
					bestCon = constraint(limList);
					bestVal[i] = (indList[i] -> varName) -> value;
				}


				(indList[i] -> varName) -> value -= 2 * perturb((indList[i] -> varName) -> value, indList[i] -> perturbation, indList[i] -> perturbationType, step);

				
				assembly -> run();
				

				if(check_constraints(limList) < bestCon)
				{
					bestCon = constraint(limList);
					bestVal[i] = (indList[i] -> varName) -> value;
				}
	

				(indList[i] -> varName) -> value = bestVal[i];
				assembly -> run();
			}
		}
	}
	
	real check_constraints(string limList[])
	{
		if(consBool == 1)
		{
			return constraint(limList);
		}
		
		return 0;
	}	
	
	// Finds the vector to the best point in the neighborhood (determined by step) of a point with dimensions indList[]
	real[] bestNeighbor(string indList[], string limList[], real step)
	{	
		real origPoint [] = {};
		real bestPoint[] = {};
		real bestVector[] = {};
		real bestInDimension;
		real bestObj;
		
		int i;
		
		assembly -> run();
		
		// Find best neighboring point in length of indList dimensions while obeying constraints
		for(i = 0; i < indList.entries(); i++)
		{	
			origPoint.append((indList[i] -> varName) -> value);
		
			bestObj = objective();
			bestInDimension = (indList[i] -> varName) -> value;
			(indList[i] -> varName) -> value += perturb((indList[i] -> varName) -> value, indList[i] -> perturbation, indList[i] -> perturbationType, step);

			assembly -> run();

			if(objective() > bestObj && check_constraints(limList) == 0)
			{
				bestObj = objective();
				bestInDimension = (indList[i] -> varName) -> value;
			}


			(indList[i] -> varName) -> value -= 2 * perturb((indList[i] -> varName) -> value, indList[i] -> perturbation, indList[i] -> perturbationType, step);

				
			assembly -> run();

			if(objective() > bestObj && check_constraints(limList) == 0)
			{
				bestObj = objective();
				bestInDimension = (indList[i] -> varName) -> value;
			}
			
			(indList[i] -> varName) -> value = bestInDimension; // Sets point
			bestPoint.append(bestInDimension);
			
			assembly -> run();
		}
		
		// Find the vector to the best point from the original point
		for(i = 0; i < bestPoint.entries(); i++)
		{
			bestVector.append(bestPoint[i] - origPoint[i]);
		}
		
		return bestVector;
	}
	
	// Returns new point from old point in direction vector
	real[] searchInDirection(string indList[], real vector[])
	{
		int i;
		real newPoint[] = {};
		
		for(i = 0; i < indList.entries(); i++)
		{
			newPoint.append((indList[i] -> varName) -> value + vector[i]);
		}
		
		return newPoint;
	}
	
	// Returns the magnitude of a vector (represented by real[])
	real magnitude(real vector[])
	{
		real sum = 0;
		int i;
		
		for(i = 0; i < vector.entries(); i++)
		{
			sum += vector[i] ** 2;
		}
		
		return sum ** (0.5);
	}
	
	void calculate ()
	{
		real bestVector[];
		real newPoint[]; 
		real lastObj = -99999999; // Negative Infinity; Technically unnecessary here, but good for understanding
		real bestVals[];
		int i;
		
		// Step 0: Find values that fit the constraints for the problem before optimizing
		//find_constraints(indList, limList, step);
		
		// (Step 5): Repeat Steps 1-4 until interval is small enough (CAN CHANGE VAL)
		while(step > 0.000001)
		{
			// (Step 3): Repeat Steps 1-2 until Step 1 returns a 0 vector
			while(magnitude(bestNeighbor(indList, limList, step)) != 0)
			{
				// Step 1: Find the vector to the best point in the neighborhood
				bestVector = bestNeighbor(indList, limList, step);
			
				assembly -> run();
				
				lastObj = -99999999;
				bestVals = {};
				
				
				// Step 2: Search in the direction of the best vector until improvement is not seen
				while(objective() > lastObj && check_constraints(limList) == 0)
				{
					newPoint = searchInDirection(indList, bestVector);
				
					for(i = 0; i < indList.entries(); i++)
					{
						(indList[i] -> varName) -> value = newPoint[i];
						
					}
		
					lastObj = objective();
					
					assembly -> run();
					
					if(check_constraints(limList) == 0) { bestVals =  newPoint; }
				}
				
				for(i = 0; i < indList.entries(); i++) // set val to avoid the constraint blowing
				{
					(indList[i] -> varName) -> value = bestVals[i];
				}
			}
			
			// Step 4: Reduce the interval
			step = step * 0.1;
		}
	}
	
	real constraint(string limList[])
	{
		real bad_val = 0;
        int i;

        for (i = 0; i < limList.entries(); i++)
		{
			real rhs = evalExpr(limList[i] -> bigger);
            real lhs = evalExpr(limList[i] -> smaller);
			
			if (lhs > rhs)
			{
				bad_val = bad_val + (lhs - rhs) / abs(rhs); // rhs can not evaluate to zero
			}
		}
		return bad_val;
	}
}
