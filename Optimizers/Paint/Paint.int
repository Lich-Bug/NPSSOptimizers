#include "aircraft.int"

class Limit extends VariableContainer {
	string bigger;

	string smaller;
	
	Option active
	{
		allowedValues = { "TRUE", "FALSE" }
        trigger = FALSE;
	}
}

class DesignVariable extends VariableContainer {
	string varName;
	
	real minimum;
	
	real maximum;
	
	int numSteps;
	
	real stepAmnt;
	
	real bestVal;
	
	int counter;
	
	Option active
	{
		allowedValues = { "TRUE", "FALSE" }
        trigger = FALSE;
	}
}

class Paint extends Element {
	string assembly = ".";
	
	int consBool = 0;
	
	real bestObj = -100000000;
	
	int numFrames;

	string indList[];
	
	string limList[];
	
	Aircraft aircraft;
	
	void postcreate(string name)
	{
		if(name -> hasInterface("DesignVariable"))
		{
			indList.append(name);
		}
		
		if(name -> hasInterface("Limit"))
		{
			limList.append(name);
			consBool = 1;
		}
	}
	
	real check_constraints(string limList[])
	{
		if(consBool == 1)
		{
			return constraint(limList);
		}
		
		return 0;
	}	
	
	// Iterates through all defined points and stores the values for the best point in all of the DesignVariable(s)
	// Recursion is used because the number of dimensions is not predefined
	void best_point(string indList[], real currentDim, real numDim)
	{
		int i;
		int j;
		int k;
		
		
		// Find step amount for for loop
		indList[currentDim] -> stepAmnt = (indList[currentDim] -> maximum - indList[currentDim] -> minimum) / (indList[currentDim] -> numSteps - 1);
		
		// If we are not at the final dimension to define a point
		if(currentDim < numDim - 1)
		{
			for(k = 0; k < indList[currentDim] -> numSteps; k++)
			{
			    indList[currentDim] -> counter = k;
				(indList[currentDim] -> varName) -> value = indList[currentDim] -> minimum + indList[currentDim] -> stepAmnt * k;
			
				best_point(indList, currentDim + 1, numDim);
			    k = indList[currentDim] -> counter;
			}
		}
		// We have all of the information to describe a point
		else
		{
			for(i = 0; i < indList[currentDim] -> numSteps; i++)
			{
				(indList[currentDim] -> varName) -> value = indList[currentDim] -> minimum + indList[currentDim] -> stepAmnt * i;
				
				assembly -> run();
			
				if(objective() > bestObj && check_constraints(limList) == 0)
				{	
					for(j = 0; j < indList.entries(); j++)
					{
						indList[j] -> bestVal = (indList[j] -> varName) -> value;
					}
				
					bestObj = objective();
				}
			}
		}
		currentDim -= 1;

	}
	
	// Prepares the independents to perform a paint again by adjusting the bounds to +/- the step size of the last computation
	void adjust_frame(string indList[])
	{
		int i;
		
		for(i = 0; i < indList.entries(); i++)
		{	
			indList[i] -> stepAmnt = indList[i] -> stepAmnt / (indList[i] -> numSteps);
		
			// Respect set maximum
			if((indList[i] -> bestVal + indList[i] -> stepAmnt) > indList[i] -> minimum)
			{
				indList[i] -> minimum = indList[i] -> bestVal - indList[i] -> stepAmnt;
			}
			
			// Respect set minimum
			if((indList[i] -> bestVal + indList[i] -> stepAmnt) < indList[i] -> maximum)
			{
				indList[i] -> maximum = indList[i] -> bestVal + indList[i] -> stepAmnt;
			}
		}
	}
	
	void calculate ()
	{
		int i;
		
		for(i = 0; i < numFrames; i++)
		{
			best_point(indList, 0, indList.entries());
			adjust_frame(indList);
		}
		
		for(i = 0; i < indList.entries(); i++)
		{
			(indList[i] -> varName) -> value = indList[i] -> bestVal;
		}
	}
	
	real constraint(string limList[])
	{
		real bad_val = 0;
        int i;

        for (i = 0; i < limList.entries(); i++)
		{
			real rhs = evalExpr(limList[i] -> bigger);
            real lhs = evalExpr(limList[i] -> smaller);
			
			if (lhs > rhs)
			{
				bad_val = bad_val + (lhs - rhs) / abs(rhs); // rhs can not evaluate to zero
			}
		}
		return bad_val;
	}
}
